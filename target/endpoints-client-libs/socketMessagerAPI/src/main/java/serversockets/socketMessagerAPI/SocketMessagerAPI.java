/*
 * Licensed under the Apache License, Version 2.0 (the "License"); you may not use this file except
 * in compliance with the License. You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software distributed under the License
 * is distributed on an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express
 * or implied. See the License for the specific language governing permissions and limitations under
 * the License.
 */
/*
 * This code was generated by https://code.google.com/p/google-apis-client-generator/
 * (build: 2015-08-03 17:34:38 UTC)
 * on 2015-08-14 at 18:09:36 UTC 
 * Modify at your own risk.
 */

package serversockets.socketMessagerAPI;

/**
 * Service definition for SocketMessagerAPI (v1).
 *
 * <p>
 * This is an API
 * </p>
 *
 * <p>
 * For more information about this service, see the
 * <a href="" target="_blank">API Documentation</a>
 * </p>
 *
 * <p>
 * This service uses {@link SocketMessagerAPIRequestInitializer} to initialize global parameters via its
 * {@link Builder}.
 * </p>
 *
 * @since 1.3
 * @author Google, Inc.
 */
@SuppressWarnings("javadoc")
public class SocketMessagerAPI extends com.google.api.client.googleapis.services.json.AbstractGoogleJsonClient {

  // Note: Leave this static initializer at the top of the file.
  static {
    com.google.api.client.util.Preconditions.checkState(
        com.google.api.client.googleapis.GoogleUtils.MAJOR_VERSION == 1 &&
        com.google.api.client.googleapis.GoogleUtils.MINOR_VERSION >= 15,
        "You are currently running with version %s of google-api-client. " +
        "You need at least version 1.15 of google-api-client to run version " +
        "1.20.0 of the socketMessagerAPI library.", com.google.api.client.googleapis.GoogleUtils.VERSION);
  }

  /**
   * The default encoded root URL of the service. This is determined when the library is generated
   * and normally should not be changed.
   *
   * @since 1.7
   */
  public static final String DEFAULT_ROOT_URL = "https://socketsserver-1035.appspot.com/_ah/api/";

  /**
   * The default encoded service path of the service. This is determined when the library is
   * generated and normally should not be changed.
   *
   * @since 1.7
   */
  public static final String DEFAULT_SERVICE_PATH = "socketMessagerAPI/v1/";

  /**
   * The default encoded base URL of the service. This is determined when the library is generated
   * and normally should not be changed.
   */
  public static final String DEFAULT_BASE_URL = DEFAULT_ROOT_URL + DEFAULT_SERVICE_PATH;

  /**
   * Constructor.
   *
   * <p>
   * Use {@link Builder} if you need to specify any of the optional parameters.
   * </p>
   *
   * @param transport HTTP transport, which should normally be:
   *        <ul>
   *        <li>Google App Engine:
   *        {@code com.google.api.client.extensions.appengine.http.UrlFetchTransport}</li>
   *        <li>Android: {@code newCompatibleTransport} from
   *        {@code com.google.api.client.extensions.android.http.AndroidHttp}</li>
   *        <li>Java: {@link com.google.api.client.googleapis.javanet.GoogleNetHttpTransport#newTrustedTransport()}
   *        </li>
   *        </ul>
   * @param jsonFactory JSON factory, which may be:
   *        <ul>
   *        <li>Jackson: {@code com.google.api.client.json.jackson2.JacksonFactory}</li>
   *        <li>Google GSON: {@code com.google.api.client.json.gson.GsonFactory}</li>
   *        <li>Android Honeycomb or higher:
   *        {@code com.google.api.client.extensions.android.json.AndroidJsonFactory}</li>
   *        </ul>
   * @param httpRequestInitializer HTTP request initializer or {@code null} for none
   * @since 1.7
   */
  public SocketMessagerAPI(com.google.api.client.http.HttpTransport transport, com.google.api.client.json.JsonFactory jsonFactory,
      com.google.api.client.http.HttpRequestInitializer httpRequestInitializer) {
    this(new Builder(transport, jsonFactory, httpRequestInitializer));
  }

  /**
   * @param builder builder
   */
  SocketMessagerAPI(Builder builder) {
    super(builder);
  }

  @Override
  protected void initialize(com.google.api.client.googleapis.services.AbstractGoogleClientRequest<?> httpClientRequest) throws java.io.IOException {
    super.initialize(httpClientRequest);
  }

  /**
   * An accessor for creating requests from the TheAPI collection.
   *
   * <p>The typical use is:</p>
   * <pre>
   *   {@code SocketMessagerAPI socketMessagerAPI = new SocketMessagerAPI(...);}
   *   {@code SocketMessagerAPI.TheAPI.List request = socketMessagerAPI.theAPI().list(parameters ...)}
   * </pre>
   *
   * @return the resource collection
   */
  public TheAPI theAPI() {
    return new TheAPI();
  }

  /**
   * The "theAPI" collection of methods.
   */
  public class TheAPI {

    /**
     * Create a request for the method "theAPI.logIn".
     *
     * This request holds the parameters needed by the socketMessagerAPI server.  After setting any
     * optional parameters, call the {@link LogIn#execute()} method to invoke the remote operation.
     *
     * @param username
     * @param password
     * @param address
     * @param port
     * @return the request
     */
    public LogIn logIn(java.lang.String username, java.lang.String password, java.lang.String address, java.lang.Integer port) throws java.io.IOException {
      LogIn result = new LogIn(username, password, address, port);
      initialize(result);
      return result;
    }

    public class LogIn extends SocketMessagerAPIRequest<serversockets.socketMessagerAPI.model.StringWrapper> {

      private static final String REST_PATH = "logIn/{username}/{password}/{address}/{port}";

      /**
       * Create a request for the method "theAPI.logIn".
       *
       * This request holds the parameters needed by the the socketMessagerAPI server.  After setting
       * any optional parameters, call the {@link LogIn#execute()} method to invoke the remote
       * operation. <p> {@link
       * LogIn#initialize(com.google.api.client.googleapis.services.AbstractGoogleClientRequest)} must
       * be called to initialize this instance immediately after invoking the constructor. </p>
       *
       * @param username
       * @param password
       * @param address
       * @param port
       * @since 1.13
       */
      protected LogIn(java.lang.String username, java.lang.String password, java.lang.String address, java.lang.Integer port) {
        super(SocketMessagerAPI.this, "POST", REST_PATH, null, serversockets.socketMessagerAPI.model.StringWrapper.class);
        this.username = com.google.api.client.util.Preconditions.checkNotNull(username, "Required parameter username must be specified.");
        this.password = com.google.api.client.util.Preconditions.checkNotNull(password, "Required parameter password must be specified.");
        this.address = com.google.api.client.util.Preconditions.checkNotNull(address, "Required parameter address must be specified.");
        this.port = com.google.api.client.util.Preconditions.checkNotNull(port, "Required parameter port must be specified.");
      }

      @Override
      public LogIn setAlt(java.lang.String alt) {
        return (LogIn) super.setAlt(alt);
      }

      @Override
      public LogIn setFields(java.lang.String fields) {
        return (LogIn) super.setFields(fields);
      }

      @Override
      public LogIn setKey(java.lang.String key) {
        return (LogIn) super.setKey(key);
      }

      @Override
      public LogIn setOauthToken(java.lang.String oauthToken) {
        return (LogIn) super.setOauthToken(oauthToken);
      }

      @Override
      public LogIn setPrettyPrint(java.lang.Boolean prettyPrint) {
        return (LogIn) super.setPrettyPrint(prettyPrint);
      }

      @Override
      public LogIn setQuotaUser(java.lang.String quotaUser) {
        return (LogIn) super.setQuotaUser(quotaUser);
      }

      @Override
      public LogIn setUserIp(java.lang.String userIp) {
        return (LogIn) super.setUserIp(userIp);
      }

      @com.google.api.client.util.Key
      private java.lang.String username;

      /**

       */
      public java.lang.String getUsername() {
        return username;
      }

      public LogIn setUsername(java.lang.String username) {
        this.username = username;
        return this;
      }

      @com.google.api.client.util.Key
      private java.lang.String password;

      /**

       */
      public java.lang.String getPassword() {
        return password;
      }

      public LogIn setPassword(java.lang.String password) {
        this.password = password;
        return this;
      }

      @com.google.api.client.util.Key
      private java.lang.String address;

      /**

       */
      public java.lang.String getAddress() {
        return address;
      }

      public LogIn setAddress(java.lang.String address) {
        this.address = address;
        return this;
      }

      @com.google.api.client.util.Key
      private java.lang.Integer port;

      /**

       */
      public java.lang.Integer getPort() {
        return port;
      }

      public LogIn setPort(java.lang.Integer port) {
        this.port = port;
        return this;
      }

      @Override
      public LogIn set(String parameterName, Object value) {
        return (LogIn) super.set(parameterName, value);
      }
    }
    /**
     * Create a request for the method "theAPI.pingServer".
     *
     * This request holds the parameters needed by the socketMessagerAPI server.  After setting any
     * optional parameters, call the {@link PingServer#execute()} method to invoke the remote operation.
     *
     * @return the request
     */
    public PingServer pingServer() throws java.io.IOException {
      PingServer result = new PingServer();
      initialize(result);
      return result;
    }

    public class PingServer extends SocketMessagerAPIRequest<serversockets.socketMessagerAPI.model.StringWrapper> {

      private static final String REST_PATH = "pingServer";

      /**
       * Create a request for the method "theAPI.pingServer".
       *
       * This request holds the parameters needed by the the socketMessagerAPI server.  After setting
       * any optional parameters, call the {@link PingServer#execute()} method to invoke the remote
       * operation. <p> {@link
       * PingServer#initialize(com.google.api.client.googleapis.services.AbstractGoogleClientRequest)}
       * must be called to initialize this instance immediately after invoking the constructor. </p>
       *
       * @since 1.13
       */
      protected PingServer() {
        super(SocketMessagerAPI.this, "POST", REST_PATH, null, serversockets.socketMessagerAPI.model.StringWrapper.class);
      }

      @Override
      public PingServer setAlt(java.lang.String alt) {
        return (PingServer) super.setAlt(alt);
      }

      @Override
      public PingServer setFields(java.lang.String fields) {
        return (PingServer) super.setFields(fields);
      }

      @Override
      public PingServer setKey(java.lang.String key) {
        return (PingServer) super.setKey(key);
      }

      @Override
      public PingServer setOauthToken(java.lang.String oauthToken) {
        return (PingServer) super.setOauthToken(oauthToken);
      }

      @Override
      public PingServer setPrettyPrint(java.lang.Boolean prettyPrint) {
        return (PingServer) super.setPrettyPrint(prettyPrint);
      }

      @Override
      public PingServer setQuotaUser(java.lang.String quotaUser) {
        return (PingServer) super.setQuotaUser(quotaUser);
      }

      @Override
      public PingServer setUserIp(java.lang.String userIp) {
        return (PingServer) super.setUserIp(userIp);
      }

      @Override
      public PingServer set(String parameterName, Object value) {
        return (PingServer) super.set(parameterName, value);
      }
    }
    /**
     * Create a request for the method "theAPI.sendMessage".
     *
     * This request holds the parameters needed by the socketMessagerAPI server.  After setting any
     * optional parameters, call the {@link SendMessage#execute()} method to invoke the remote
     * operation.
     *
     * @param sessionId
     * @param username
     * @param message
     * @param content the {@link serversockets.socketMessagerAPI.model.Coordinates}
     * @return the request
     */
    public SendMessage sendMessage(java.lang.String sessionId, java.lang.String username, java.lang.String message, serversockets.socketMessagerAPI.model.Coordinates content) throws java.io.IOException {
      SendMessage result = new SendMessage(sessionId, username, message, content);
      initialize(result);
      return result;
    }

    public class SendMessage extends SocketMessagerAPIRequest<serversockets.socketMessagerAPI.model.StringWrapper> {

      private static final String REST_PATH = "sendMessage/{sessionId}/{username}/{message}";

      /**
       * Create a request for the method "theAPI.sendMessage".
       *
       * This request holds the parameters needed by the the socketMessagerAPI server.  After setting
       * any optional parameters, call the {@link SendMessage#execute()} method to invoke the remote
       * operation. <p> {@link
       * SendMessage#initialize(com.google.api.client.googleapis.services.AbstractGoogleClientRequest)}
       * must be called to initialize this instance immediately after invoking the constructor. </p>
       *
       * @param sessionId
       * @param username
       * @param message
       * @param content the {@link serversockets.socketMessagerAPI.model.Coordinates}
       * @since 1.13
       */
      protected SendMessage(java.lang.String sessionId, java.lang.String username, java.lang.String message, serversockets.socketMessagerAPI.model.Coordinates content) {
        super(SocketMessagerAPI.this, "POST", REST_PATH, content, serversockets.socketMessagerAPI.model.StringWrapper.class);
        this.sessionId = com.google.api.client.util.Preconditions.checkNotNull(sessionId, "Required parameter sessionId must be specified.");
        this.username = com.google.api.client.util.Preconditions.checkNotNull(username, "Required parameter username must be specified.");
        this.message = com.google.api.client.util.Preconditions.checkNotNull(message, "Required parameter message must be specified.");
      }

      @Override
      public SendMessage setAlt(java.lang.String alt) {
        return (SendMessage) super.setAlt(alt);
      }

      @Override
      public SendMessage setFields(java.lang.String fields) {
        return (SendMessage) super.setFields(fields);
      }

      @Override
      public SendMessage setKey(java.lang.String key) {
        return (SendMessage) super.setKey(key);
      }

      @Override
      public SendMessage setOauthToken(java.lang.String oauthToken) {
        return (SendMessage) super.setOauthToken(oauthToken);
      }

      @Override
      public SendMessage setPrettyPrint(java.lang.Boolean prettyPrint) {
        return (SendMessage) super.setPrettyPrint(prettyPrint);
      }

      @Override
      public SendMessage setQuotaUser(java.lang.String quotaUser) {
        return (SendMessage) super.setQuotaUser(quotaUser);
      }

      @Override
      public SendMessage setUserIp(java.lang.String userIp) {
        return (SendMessage) super.setUserIp(userIp);
      }

      @com.google.api.client.util.Key
      private java.lang.String sessionId;

      /**

       */
      public java.lang.String getSessionId() {
        return sessionId;
      }

      public SendMessage setSessionId(java.lang.String sessionId) {
        this.sessionId = sessionId;
        return this;
      }

      @com.google.api.client.util.Key
      private java.lang.String username;

      /**

       */
      public java.lang.String getUsername() {
        return username;
      }

      public SendMessage setUsername(java.lang.String username) {
        this.username = username;
        return this;
      }

      @com.google.api.client.util.Key
      private java.lang.String message;

      /**

       */
      public java.lang.String getMessage() {
        return message;
      }

      public SendMessage setMessage(java.lang.String message) {
        this.message = message;
        return this;
      }

      @Override
      public SendMessage set(String parameterName, Object value) {
        return (SendMessage) super.set(parameterName, value);
      }
    }
    /**
     * Create a request for the method "theAPI.testSocket".
     *
     * This request holds the parameters needed by the socketMessagerAPI server.  After setting any
     * optional parameters, call the {@link TestSocket#execute()} method to invoke the remote operation.
     *
     * @param portnumber
     * @return the request
     */
    public TestSocket testSocket(java.lang.Integer portnumber) throws java.io.IOException {
      TestSocket result = new TestSocket(portnumber);
      initialize(result);
      return result;
    }

    public class TestSocket extends SocketMessagerAPIRequest<serversockets.socketMessagerAPI.model.StringWrapper> {

      private static final String REST_PATH = "testSocket/{portnumber}";

      /**
       * Create a request for the method "theAPI.testSocket".
       *
       * This request holds the parameters needed by the the socketMessagerAPI server.  After setting
       * any optional parameters, call the {@link TestSocket#execute()} method to invoke the remote
       * operation. <p> {@link
       * TestSocket#initialize(com.google.api.client.googleapis.services.AbstractGoogleClientRequest)}
       * must be called to initialize this instance immediately after invoking the constructor. </p>
       *
       * @param portnumber
       * @since 1.13
       */
      protected TestSocket(java.lang.Integer portnumber) {
        super(SocketMessagerAPI.this, "POST", REST_PATH, null, serversockets.socketMessagerAPI.model.StringWrapper.class);
        this.portnumber = com.google.api.client.util.Preconditions.checkNotNull(portnumber, "Required parameter portnumber must be specified.");
      }

      @Override
      public TestSocket setAlt(java.lang.String alt) {
        return (TestSocket) super.setAlt(alt);
      }

      @Override
      public TestSocket setFields(java.lang.String fields) {
        return (TestSocket) super.setFields(fields);
      }

      @Override
      public TestSocket setKey(java.lang.String key) {
        return (TestSocket) super.setKey(key);
      }

      @Override
      public TestSocket setOauthToken(java.lang.String oauthToken) {
        return (TestSocket) super.setOauthToken(oauthToken);
      }

      @Override
      public TestSocket setPrettyPrint(java.lang.Boolean prettyPrint) {
        return (TestSocket) super.setPrettyPrint(prettyPrint);
      }

      @Override
      public TestSocket setQuotaUser(java.lang.String quotaUser) {
        return (TestSocket) super.setQuotaUser(quotaUser);
      }

      @Override
      public TestSocket setUserIp(java.lang.String userIp) {
        return (TestSocket) super.setUserIp(userIp);
      }

      @com.google.api.client.util.Key
      private java.lang.Integer portnumber;

      /**

       */
      public java.lang.Integer getPortnumber() {
        return portnumber;
      }

      public TestSocket setPortnumber(java.lang.Integer portnumber) {
        this.portnumber = portnumber;
        return this;
      }

      @Override
      public TestSocket set(String parameterName, Object value) {
        return (TestSocket) super.set(parameterName, value);
      }
    }

  }

  /**
   * Builder for {@link SocketMessagerAPI}.
   *
   * <p>
   * Implementation is not thread-safe.
   * </p>
   *
   * @since 1.3.0
   */
  public static final class Builder extends com.google.api.client.googleapis.services.json.AbstractGoogleJsonClient.Builder {

    /**
     * Returns an instance of a new builder.
     *
     * @param transport HTTP transport, which should normally be:
     *        <ul>
     *        <li>Google App Engine:
     *        {@code com.google.api.client.extensions.appengine.http.UrlFetchTransport}</li>
     *        <li>Android: {@code newCompatibleTransport} from
     *        {@code com.google.api.client.extensions.android.http.AndroidHttp}</li>
     *        <li>Java: {@link com.google.api.client.googleapis.javanet.GoogleNetHttpTransport#newTrustedTransport()}
     *        </li>
     *        </ul>
     * @param jsonFactory JSON factory, which may be:
     *        <ul>
     *        <li>Jackson: {@code com.google.api.client.json.jackson2.JacksonFactory}</li>
     *        <li>Google GSON: {@code com.google.api.client.json.gson.GsonFactory}</li>
     *        <li>Android Honeycomb or higher:
     *        {@code com.google.api.client.extensions.android.json.AndroidJsonFactory}</li>
     *        </ul>
     * @param httpRequestInitializer HTTP request initializer or {@code null} for none
     * @since 1.7
     */
    public Builder(com.google.api.client.http.HttpTransport transport, com.google.api.client.json.JsonFactory jsonFactory,
        com.google.api.client.http.HttpRequestInitializer httpRequestInitializer) {
      super(
          transport,
          jsonFactory,
          DEFAULT_ROOT_URL,
          DEFAULT_SERVICE_PATH,
          httpRequestInitializer,
          false);
    }

    /** Builds a new instance of {@link SocketMessagerAPI}. */
    @Override
    public SocketMessagerAPI build() {
      return new SocketMessagerAPI(this);
    }

    @Override
    public Builder setRootUrl(String rootUrl) {
      return (Builder) super.setRootUrl(rootUrl);
    }

    @Override
    public Builder setServicePath(String servicePath) {
      return (Builder) super.setServicePath(servicePath);
    }

    @Override
    public Builder setHttpRequestInitializer(com.google.api.client.http.HttpRequestInitializer httpRequestInitializer) {
      return (Builder) super.setHttpRequestInitializer(httpRequestInitializer);
    }

    @Override
    public Builder setApplicationName(String applicationName) {
      return (Builder) super.setApplicationName(applicationName);
    }

    @Override
    public Builder setSuppressPatternChecks(boolean suppressPatternChecks) {
      return (Builder) super.setSuppressPatternChecks(suppressPatternChecks);
    }

    @Override
    public Builder setSuppressRequiredParameterChecks(boolean suppressRequiredParameterChecks) {
      return (Builder) super.setSuppressRequiredParameterChecks(suppressRequiredParameterChecks);
    }

    @Override
    public Builder setSuppressAllChecks(boolean suppressAllChecks) {
      return (Builder) super.setSuppressAllChecks(suppressAllChecks);
    }

    /**
     * Set the {@link SocketMessagerAPIRequestInitializer}.
     *
     * @since 1.12
     */
    public Builder setSocketMessagerAPIRequestInitializer(
        SocketMessagerAPIRequestInitializer socketmessagerapiRequestInitializer) {
      return (Builder) super.setGoogleClientRequestInitializer(socketmessagerapiRequestInitializer);
    }

    @Override
    public Builder setGoogleClientRequestInitializer(
        com.google.api.client.googleapis.services.GoogleClientRequestInitializer googleClientRequestInitializer) {
      return (Builder) super.setGoogleClientRequestInitializer(googleClientRequestInitializer);
    }
  }
}
